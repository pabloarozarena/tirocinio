summarise(Count = n()) %>%
arrange(desc(Count))
genus_counts <- unspecified_data %>%
group_by(Genus) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
# Generate the table
kable(genus_counts)
View(genus_counts)
View(all_genus)
View(all_genus)
View(all_genus)
View(all_genus)
View(famil_genus_data)
View(family_counts)
all_genus <- data %>%
group_by(Genus) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
all_genus$Genus <- ifelse(all_genus$Genus == "", "Unspecified", all_genus$Genus)
#Filter out Betacoronavirus and Unspecified Genera
filtered_genus <- all_genus %>%
filter(!Genus %in% c("Betacoronavirus", "Unspecified"))
# Mean number of sequences per genus
mean_count_genus <- mean(filtered_genus$Count)
ggplot(filtered_genus, aes(x = reorder(Genus, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_blank()) +
labs(title = "Bar Plot of Viral Genus", x = "Viral Genus", y = "Count") +
geom_hline(yintercept = mean_count, color = "red") +
annotate("text", x = 1, y = mean_count + 1, label = paste("Mean =", round(mean_count_genus, 2)), color = "red")
ggplot(filtered_genus_100, aes(x = reorder(Genus, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_blank()) +
labs(title = "Bar Plot of Viral Genus", x = "Viral Genus", y = "Count") +
geom_hline(yintercept = mean_count, color = "red") +
annotate("text", x = 1, y = mean_count + 1, label = paste("Mean =", round(mean_count_genus, 2)), color = "red")
# Define the ranges and labels
ranges <- c(0, 1, 10, 25, 100, Inf)  # Inclusive lower bound
labels <- c("1", "2-10", "11-25", "26-100", ">100")
# Classify counts into ranges
filtered_genus$Range <- cut(
filtered_genus$Count,
breaks = ranges,
labels = labels,
right = TRUE,  # Include the upper bound in each range
include.lowest = TRUE
)
# Calculate the number and percentage of Genus per range
stats <- filtered_genus %>%
dplyr::count(Range) %>%
dplyr::mutate(
Percentage = (n / sum(n)) * 100
)
# Add the total row
total_row <- tibble(
Range = "Total",
n = sum(stats$n),
Percentage = 100
)
# Convert the table for desired formatting
final_stats <- stats %>%
dplyr::bind_rows(total_row) %>%
dplyr::rename(Genus = n) %>%
tibble::column_to_rownames(var = "Range")
# Remove the "Total" row since it's not needed for the pie chart
final_stats_for_plot <- final_stats[rownames(final_stats) != "Total", ]
# Create the pie chart
install.packages("gridExtra")
install.packages("gridExtra")
library(gridExtra)
pie_chart <- ggplot(final_stats_for_plot, aes(x = "", y = Genus, fill = factor(rownames(final_stats_for_plot), levels = rev(rownames(final_stats_for_plot))))) +
geom_col(width = 1) +
coord_polar(theta = "y") +
labs(
title = "Number of Genus within different Ranges (Number of Sequences)",
fill = "Range"
) +
geom_text(
aes(
label = paste0(round(Percentage, 2), "%"),
y = cumsum(Genus) - Genus / 2
),
color = "white",
size = 3
) +
theme_void() +
theme(legend.position = "right")
pie_chart
# Create the table
table_plot <- tableGrob(final_stats, rows = rownames(final_stats))
# Combine the plots
grid.arrange(pie_chart, table_plot, ncol = 1)
family_genus_data <- data %>%
select(Family, Genus)
family_genus_data$Genus <- ifelse(family_genus_data$Genus == "", "Unspecified", family_genus_data$Genus)
filtered_family_genus <- family_genus_data %>%
filter(!Genus %in% c("Betacoronavirus", "Unspecified"))
family_genus_counts <- filtered_family_genus %>%
group_by(Family, Genus) %>%
summarise(Count = n(), .groups = 'drop') %>%
arrange(desc(Count))
# Add the Range column from filtered_genus to family_genus_counts
family_genus_counts <- family_genus_counts %>%
left_join(filtered_genus %>% select(Genus, Range), by = "Genus")
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
distinct(Family)
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
summarise(TotalCount = sum(Count), .groups = "drop") %>%
arrange(desc(TotalCount)) # Optional: Arrange by total count in descending order
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
summarise(
Genera = n(),
Sequences = sum(Count)
)
View(poor_families)
View(stats)
# Define the ranges and labels
ranges <- c(0, 1, 10, 25, 100, Inf)  # Inclusive lower bound
labels <- c("1", "2-10", "11-25", "26-100", ">100")
# Classify counts into ranges
filtered_genus$Range <- cut(
filtered_genus$Count,
breaks = ranges,
labels = labels,
right = TRUE,  # Include the upper bound in each range
include.lowest = TRUE
)
# Calculate the number and percentage of Genus per range
stats <- filtered_genus %>%
dplyr::count(Range) %>%
dplyr::mutate(
Percentage = (n / sum(n)) * 100
)
# Add the total row
total_row <- tibble(
Range = "Total",
n = sum(stats$n),
Percentage = 100
)
# Convert the table for desired formatting
final_stats <- stats %>%
dplyr::bind_rows(total_row) %>%
dplyr::rename(Genus = n) %>%
tibble::column_to_rownames(var = "Range")
# Remove the "Total" row since it's not needed for the pie chart
final_stats_for_plot <- final_stats[rownames(final_stats) != "Total", ]
# Create the pie chart
install.packages("gridExtra")
library(gridExtra)
pie_chart <- ggplot(final_stats_for_plot, aes(x = "", y = Genus, fill = factor(rownames(final_stats_for_plot), levels = rev(rownames(final_stats_for_plot))))) +
geom_col(width = 1) +
coord_polar(theta = "y") +
labs(
title = "Number of Genus within different Ranges (Number of Sequences)",
fill = "Range"
) +
geom_text(
aes(
label = paste0(round(Percentage, 2), "%"),
y = cumsum(Genus) - Genus / 2
),
color = "white",
size = 3
) +
theme_void() +
theme(legend.position = "right")
# Create the table
table_plot <- tableGrob(final_stats, rows = rownames(final_stats))
# Combine the plots
grid.arrange(pie_chart, table_plot, ncol = 1)
install.packages("gridExtra")
# Define the ranges and labels
ranges <- c(0, 1, 10, 25, 100, Inf)  # Inclusive lower bound
labels <- c("1", "2-10", "11-25", "26-100", ">100")
# Classify counts into ranges
filtered_genus$Range <- cut(
filtered_genus$Count,
breaks = ranges,
labels = labels,
right = TRUE,  # Include the upper bound in each range
include.lowest = TRUE
)
# Calculate the number and percentage of Genus per range
stats <- filtered_genus %>%
dplyr::count(Range) %>%
dplyr::mutate(
Percentage = (n / sum(n)) * 100
)
# Add the total row
total_row <- tibble(
Range = "Total",
n = sum(stats$n),
Percentage = 100
)
# Convert the table for desired formatting
final_stats <- stats %>%
dplyr::bind_rows(total_row) %>%
dplyr::rename(Genus = n) %>%
tibble::column_to_rownames(var = "Range")
# Remove the "Total" row since it's not needed for the pie chart
final_stats_for_plot <- final_stats[rownames(final_stats) != "Total", ]
pie_chart <- ggplot(final_stats_for_plot, aes(x = "", y = Genus, fill = factor(rownames(final_stats_for_plot), levels = rev(rownames(final_stats_for_plot))))) +
geom_col(width = 1) +
coord_polar(theta = "y") +
labs(
title = "Number of Genus within different Ranges (Number of Sequences)",
fill = "Range"
) +
geom_text(
aes(
label = paste0(round(Percentage, 2), "%"),
y = cumsum(Genus) - Genus / 2
),
color = "white",
size = 3
) +
theme_void() +
theme(legend.position = "right")
# Create the table
table_plot <- tableGrob(final_stats, rows = rownames(final_stats))
# Combine the plots
grid.arrange(pie_chart, table_plot, ncol = 1)
View(poor_families)
family_genus_data <- data %>%
select(Family, Genus)
family_genus_data$Genus <- ifelse(family_genus_data$Genus == "", "Unspecified", family_genus_data$Genus)
filtered_family_genus <- family_genus_data %>%
filter(!Genus %in% c("Betacoronavirus", "Unspecified"))
family_genus_counts <- filtered_family_genus %>%
group_by(Family, Genus) %>%
summarise(Count = n(), .groups = 'drop') %>%
arrange(desc(Count))
family_genus_counts <- family_genus_counts %>%
left_join(filtered_genus %>% select(Genus, Range), by = "Genus")
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
distinct(Family)
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
summarise(TotalCount = sum(Count), .groups = "drop") %>%
arrange(desc(TotalCount))
#Filter out Betacoronavirus and Unspecified Genera
filtered_genus <- all_genus %>%
filter(!Genus %in% c("Betacoronavirus", "Unspecified"))
# Mean number of sequences per genus
mean_count_genus <- mean(filtered_genus$Count)
ggplot(filtered_genus, aes(x = reorder(Genus, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_blank()) +
labs(title = "Sequence Distribution across Viral Genera (Betacoronavirus and Unspecified Genera excluded", x = "Viral Genus", y = "Count") +
geom_hline(yintercept = mean_count_genus, color = "red") +
annotate("text", x = 1, y = mean_count_genus + 1, label = paste("Mean =", round(mean_count_genus, 2)), color = "red")
kable(poor_families) %>%
arrange(desc(Count))
family_genus_data <- data %>%
select(Family, Genus)
family_genus_data$Genus <- ifelse(family_genus_data$Genus == "", "Unspecified", family_genus_data$Genus)
filtered_family_genus <- family_genus_data %>%
filter(!Genus %in% c("Betacoronavirus", "Unspecified"))
family_genus_counts <- filtered_family_genus %>%
group_by(Family, Genus) %>%
summarise(Count = n(), .groups = 'drop') %>%
arrange(desc(Count))
family_genus_counts <- family_genus_counts %>%
left_join(filtered_genus %>% select(Genus, Range), by = "Genus")
family_genus_data <- data %>%
select(Family, Genus)
family_genus_data$Genus <- ifelse(family_genus_data$Genus == "", "Unspecified", family_genus_data$Genus)
filtered_family_genus <- family_genus_data %>%
filter(!Genus %in% c("Betacoronavirus", "Unspecified"))
family_genus_counts <- filtered_family_genus %>%
group_by(Family, Genus) %>%
summarise(Count = n(), .groups = 'drop') %>%
arrange(desc(Count))
family_genus_counts <- family_genus_counts %>%
left_join(filtered_genus %>% select(Genus, Range), by = "Genus")
library(dplyr)
library(ggplot2)
library(knitr)
library(gridExtra)
data <- read.csv("sequences.csv")
kable(head(data), caption = "Preview of the NCBI Virus Query's Result")
# Replace blank cells with "Unspecified"
data$Family <- ifelse(data$Family == "", "Unspecified", data$Family)
# Group by family and count sequences
family_counts <- data %>%
group_by(Family) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
# Generate the table
kable(family_counts)
# Inspect Unspecified Family
unspecified_data <- data %>%
filter(Family == "Unspecified") %>%
select(Family, Genus, Species)
# Replace blank cells with "Unspecified"
unspecified_data$Genus <- ifelse(unspecified_data$Genus == "", "Unspecified", unspecified_data$Genus)
genus_counts <- unspecified_data %>%
group_by(Genus) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
# Generate the table
kable(genus_counts)
all_genus <- data %>%
group_by(Genus) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
all_genus$Genus <- ifelse(all_genus$Genus == "", "Unspecified", all_genus$Genus)
#Filter out Betacoronavirus and Unspecified Genera
filtered_genus <- all_genus %>%
filter(!Genus %in% c("Betacoronavirus", "Unspecified"))
# Mean number of sequences per genus
mean_count_genus <- mean(filtered_genus$Count)
ggplot(filtered_genus, aes(x = reorder(Genus, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_blank()) +
labs(title = "Sequence Distribution across Viral Genera (Betacoronavirus and Unspecified Genera excluded", x = "Viral Genus", y = "Count") +
geom_hline(yintercept = mean_count_genus, color = "red") +
annotate("text", x = 1, y = mean_count_genus + 1, label = paste("Mean =", round(mean_count_genus, 2)), color = "red")
# Define the ranges and labels
ranges <- c(0, 1, 10, 25, 100, Inf)  # Inclusive lower bound
labels <- c("1", "2-10", "11-25", "26-100", ">100")
# Classify counts into ranges
filtered_genus$Range <- cut(
filtered_genus$Count,
breaks = ranges,
labels = labels,
right = TRUE,  # Include the upper bound in each range
include.lowest = TRUE
)
# Calculate the number and percentage of Genus per range
stats <- filtered_genus %>%
dplyr::count(Range) %>%
dplyr::mutate(
Percentage = (n / sum(n)) * 100
)
# Add the total row
total_row <- tibble(
Range = "Total",
n = sum(stats$n),
Percentage = 100
)
# Convert the table for desired formatting
final_stats <- stats %>%
dplyr::bind_rows(total_row) %>%
dplyr::rename(Genus = n) %>%
tibble::column_to_rownames(var = "Range")
# Remove the "Total" row since it's not needed for the pie chart
final_stats_for_plot <- final_stats[rownames(final_stats) != "Total", ]
pie_chart <- ggplot(final_stats_for_plot, aes(x = "", y = Genus, fill = factor(rownames(final_stats_for_plot), levels = rev(rownames(final_stats_for_plot))))) +
geom_col(width = 1) +
coord_polar(theta = "y") +
labs(
title = "Number of Genus within different Ranges (Number of Sequences)",
fill = "Range"
) +
geom_text(
aes(
label = paste0(round(Percentage, 2), "%"),
y = cumsum(Genus) - Genus / 2
),
color = "white",
size = 3
) +
theme_void() +
theme(legend.position = "right")
# Create the table
table_plot <- tableGrob(final_stats, rows = rownames(final_stats))
# Combine the plots
grid.arrange(pie_chart, table_plot, ncol = 1)
family_genus_data <- data %>%
select(Family, Genus)
family_genus_data$Genus <- ifelse(family_genus_data$Genus == "", "Unspecified", family_genus_data$Genus)
filtered_family_genus <- family_genus_data %>%
filter(!Genus %in% c("Betacoronavirus", "Unspecified"))
family_genus_counts <- filtered_family_genus %>%
group_by(Family, Genus) %>%
summarise(Count = n(), .groups = 'drop') %>%
arrange(desc(Count))
family_genus_counts <- family_genus_counts %>%
left_join(filtered_genus %>% select(Genus, Range), by = "Genus")
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
distinct(Family)
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
summarise(TotalCount = sum(Count), .groups = "drop") %>%
arrange(desc(TotalCount))
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
summarise(
Genera = n(),
Sequences = sum(Count))
)
family_genus_data <- data %>%
select(Family, Genus)
family_genus_data$Genus <- ifelse(family_genus_data$Genus == "", "Unspecified", family_genus_data$Genus)
filtered_family_genus <- family_genus_data %>%
filter(!Genus %in% c("Betacoronavirus", "Unspecified"))
family_genus_counts <- filtered_family_genus %>%
group_by(Family, Genus) %>%
summarise(Count = n(), .groups = 'drop') %>%
arrange(desc(Count))
family_genus_counts <- family_genus_counts %>%
left_join(filtered_genus %>% select(Genus, Range), by = "Genus")
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
distinct(Family)
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
summarise(TotalCount = sum(Count), .groups = "drop") %>%
arrange(desc(TotalCount))
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
summarise(
Genera = n(),
Sequences = sum(Count)))
family_genus_data <- data %>%
select(Family, Genus)
family_genus_data$Genus <- ifelse(family_genus_data$Genus == "", "Unspecified", family_genus_data$Genus)
filtered_family_genus <- family_genus_data %>%
filter(!Genus %in% c("Betacoronavirus", "Unspecified"))
family_genus_counts <- filtered_family_genus %>%
group_by(Family, Genus) %>%
summarise(Count = n(), .groups = 'drop') %>%
arrange(desc(Count))
family_genus_counts <- family_genus_counts %>%
left_join(filtered_genus %>% select(Genus, Range), by = "Genus")
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
distinct(Family)
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
summarise(TotalCount = sum(Count), .groups = "drop") %>%
arrange(desc(TotalCount))
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
summarise(
Genera = n(),
Sequences = sum(Count))
kable(poor_families)
family_genus_data <- data %>%
select(Family, Genus)
family_genus_data$Genus <- ifelse(family_genus_data$Genus == "", "Unspecified", family_genus_data$Genus)
filtered_family_genus <- family_genus_data %>%
filter(!Genus %in% c("Betacoronavirus", "Unspecified"))
family_genus_counts <- filtered_family_genus %>%
group_by(Family, Genus) %>%
summarise(Count = n(), .groups = 'drop') %>%
arrange(desc(Count))
family_genus_counts <- family_genus_counts %>%
left_join(filtered_genus %>% select(Genus, Range), by = "Genus")
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
distinct(Family)
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
summarise(TotalCount = sum(Count), .groups = "drop") %>%
arrange(desc(TotalCount))
poor_families <- family_genus_counts %>%
group_by(Family) %>%
filter(all(Range %in% c("1", "2-10"))) %>%
summarise(
Genera = n(),
Sequences = sum(Count)) %>%
arrange(desc(Sequences))
kable(poor_families)
View(filtered_genus)
filtered_genus_100 <- filtered_genus %>%
filter(Count >=100)
ggplot(filtered_genus_100, aes(x = reorder(Genus, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_blank()) +
labs(title = "Sequence Distribution across Viral Genera (<100)", x = "Viral Genus", y = "Count") +
geom_hline(yintercept = mean_count, color = "red") +
annotate("text", x = 1, y = mean_count + 1, label = paste("Mean =", round(mean_count_genus, 2)), color = "red")
filtered_genus_100 <- filtered_genus %>%
filter(Count >=100)
ggplot(filtered_genus_100, aes(x = reorder(Genus, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_blank()) +
labs(title = "Sequence Distribution across Viral Genera (<100)", x = "Viral Genus", y = "Count") +
geom_hline(yintercept = mean_count, color = "red") +
annotate("text", x = 1, y = mean_count_genus + 1, label = paste("Mean =", round(mean_count_genus, 2)), color = "red")
filtered_genus_100 <- filtered_genus %>%
filter(Count >=100)
ggplot(filtered_genus_100, aes(x = reorder(Genus, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_blank()) +
labs(title = "Sequence Distribution across Viral Genera (<100)", x = "Viral Genus", y = "Count") +
geom_hline(yintercept = mean_count_genus, color = "red") +
annotate("text", x = 1, y = mean_count_genus + 1, label = paste("Mean =", round(mean_count_genus, 2)), color = "red")
